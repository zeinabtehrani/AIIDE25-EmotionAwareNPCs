# -*- coding: utf-8 -*-
"""AIIDE25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ltPZ26fO7PkfkwfqmGwD-C3mqpiNQXAj
"""



!pip install transformers
!pip install torch
!pip install deep-translator

from transformers import pipeline

# Load the HuggingFace emotion classification pipeline
classifier = pipeline("text-classification", model="j-hartmann/emotion-english-distilroberta-base", return_all_scores=True)

# Example sentence
text = "I'm feeling so alone."

# Run emotion detection
results = classifier(text)[0]
sorted_results = sorted(results, key=lambda x: x['score'], reverse=True)

# Display results
for emotion in sorted_results:
    print(f"{emotion['label']}: {emotion['score']:.4f}")

test_inputs = [
    "I'm so tired of everything.",
    "I finally feel proud of myself.",
    "No one ever listens to me!",
    "I don’t know what’s going to happen.",
    "Maybe things will get better soon."
]

for text in test_inputs:
    print(f"\nInput: {text}")
    results = classifier(text)[0]
    top_emotion = max(results, key=lambda x: x['score'])
    print(f"Detected Emotion: {top_emotion['label']} (Confidence: {top_emotion['score']:.4f})")

# Define replies for each emotion
reply_map = {
    "sadness": "I'm here for you. You're not alone — it's okay to feel this way.",
    "joy": "That's wonderful! You deserve to feel proud of yourself.",
    "anger": "I'm really sorry you're feeling unheard. Your voice matters.",
    "surprise": "That sounds unexpected — take a deep breath. You're doing your best.",
    "fear": "It’s okay to feel scared. You're not alone in this.",
    "disgust": "That must feel so heavy. You’re strong for acknowledging it.",
    "neutral": "I'm listening. Even in calm moments, your feelings matter."
}

print(f"Supportive Reply: {reply_map.get(top_emotion['label'], 'I’m here for you.')}")

from transformers import pipeline

classifier = pipeline("text-classification", model="j-hartmann/emotion-english-distilroberta-base", return_all_scores=True)


# Multilingual emotional inputs
inputs = {
    "Persian": "دیگه از همه چی خسته شدم.",
    "French": "Je suis fatigué de tout.",
    "Arabic": "أنا متعب من كل شيء."
}

for lang, original in inputs.items():
    print(f"\nOriginal ({lang}): {original}")
    try:
        # Translate to English using deep_translator
        translated = GoogleTranslator(source='auto', target='en').translate(original)
        print(f"Translated to English: {translated}")

        # Run emotion detection
        results = classifier(translated)[0]
        top_emotion = max(results, key=lambda x: x['score'])
        print(f"Detected Emotion: {top_emotion['label']} (Confidence: {top_emotion['score']:.4f})")
        print(f"Supportive Reply: {reply_map.get(top_emotion['label'], 'I’m here for you.')}")
    except Exception as e:
        print(f"Error with {lang} input: {e}")

from deep_translator import GoogleTranslator

# Idiomatic expressions from each language representing hopelessness
idiom_inputs = {
    "Persian": "دیگه چشمم آب نمی‌خوره",
    "English": "I’ve hit rock bottom.",
    "French": "J’ai le moral dans les chaussettes.",
    "Arabic": "ضاق صدري وما عاد فيني أتحمل"
}

print("\n🧪 IDIOM TESTING — Cross-linguistic emotion detection:\n")
for lang, original in idiom_inputs.items():
    print(f"Original ({lang}): {original}")
    try:
        # Translate to English only if not English already
        if lang != "English":
            translated = GoogleTranslator(source='auto', target='en').translate(original)
        else:
            translated = original

        print(f"Translated to English: {translated}")
        results = classifier(translated)[0]
        top_emotion = max(results, key=lambda x: x['score'])
        print(f"Detected Emotion: {top_emotion['label']} (Confidence: {top_emotion['score']:.4f})")
        print(f"Supportive Reply: {reply_map.get(top_emotion['label'], 'I’m here for you.')}\n")

    except Exception as e:
        print(f"Error with {lang} input: {e}")